import matplotlib.pyplot as plt
import numpy as np

class Derivative:
    """Дескриптор для вычисления производной функции численно."""

    def __init__(self, h=1e-5):
        self.h = h

    def __get__(self, instance, owner):
        """Обеспечивает доступ к производной из класса ExponentialFunction."""
        self.instance = instance
        return self

    def __call__(self, x):
        """Вычисляет производную численно в точке x."""
        if self.instance is None:
            raise AttributeError("Derivative должен быть вызван через экземпляр ExponentialFunction")
        return (self.instance(x + self.h) - self.instance(x - self.h)) / (2 * self.h)

class ExponentialFunction:
    """Класс для представления функции f(x) = a * exp(x)."""

    def __init__(self, a):
        """Инициализация с коэффициентом a."""
        self.a = a
        self.derivative = Derivative()  # Создаем экземпляр дескриптора

    def __call__(self, x):
        """Вычисляет значение f(x) = a * exp(x)."""
        return self.a * np.exp(x)

    def plot(self, x_start=-2, x_end=2, num_points=100):
        """Строит графики f(x) и f'(x) на интервале [x_start, x_end]."""
        x = np.linspace(x_start, x_end, num_points)
        y = self(x)  # Значения функции
        y_derivative = self.derivative(x)  # Значения производной

        plt.figure(figsize=(8, 6))
        plt.plot(x, y, label=f"f(x) = {self.a} * exp(x)")
        plt.plot(x, y_derivative, label=f"f'(x) = {self.a} * exp(x)") #Производная такая же
        plt.xlabel("x")
        plt.ylabel("y")
        plt.title("График функции и ее производной")
        plt.legend()
        plt.grid(True)
        plt.show()

# Пример использования:
exp_func = ExponentialFunction(a=2)
print(exp_func(0))
print(exp_func.derivative(0))

# Построение графиков
exp_func.plot()
