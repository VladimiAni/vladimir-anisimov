#1
class Point2D:
    """Класс для представления 2D точки."""

    def __init__(self, x, y):
        """Инициализация точки с координатами x и y."""
        self.x = x
        self.y = y

class Point3D(Point2D):
    """Класс для представления 3D точки с использованием __slots__."""

    __slots__ = ('__z',)  # Используем __slots__ для ограничения атрибутов

    def __init__(self, x, y, z):
        """Инициализация точки с координатами x, y и z."""
        super().__init__(x, y) #Вызываем инициализатор базового класса
        self.__z = z

    @property
    def z(self):
        """Свойство для доступа к координате z (только чтение)."""
        return self.__z

    @z.setter
    def z(self, value):
        """Сеттер для координаты z, выбрасывающий исключение."""
        raise AttributeError("Изменение координаты z запрещено.")


# Пример тестового сценария:
pt3 = Point3D(10, 20, 30)

print("x:", pt3.x)
print("y:", pt3.y)
print("z:", pt3.z)

try:
    pt3.z = 40
except AttributeError as e:
    print(f"Ошибка: {e}")

try:
    pt3.extra = 100
except AttributeError as e:
    print(f"Ошибка: {e}")

try:
    print(pt3.__dict__)
except AttributeError as e:
    print(f"Ошибка: {e}")
#2
import timeit
import sys

class NormalPoint:
    """Класс для представления точки с обычным словарем атрибутов."""

    def __init__(self, x, y):
        """Инициализация точки с координатами x и y."""
        self.x = x
        self.y = y

    def move(self, dx, dy):
        """Перемещение точки на dx и dy."""
        self.x += dx
        self.y += dy

class SlotPoint:
    """Класс для представления точки с использованием __slots__."""

    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        """Инициализация точки с координатами x и y."""
        self.x = x
        self.y = y

    def move(self, dx, dy):
        """Перемещение точки на dx и dy."""
        self.x += dx
        self.y += dy

# Количество экземпляров для тестов:
num_instances = 1000

# Создание экземпляров:
normal_points = [NormalPoint(i, i) for i in range(num_instances)]
slot_points = [SlotPoint(i, i) for i in range(num_instances)]

# Функция для замера времени:
def time_move(points):
    for point in points:
        point.move(1, 1)

# Замер времени для NormalPoint:
normal_time = timeit.timeit(lambda: time_move(normal_points), number=1000)
print(f"NormalPoint: {normal_time:.6f} секунд")

# Замер времени для SlotPoint:
slot_time = timeit.timeit(lambda: time_move(slot_points), number=1000)
print(f"SlotPoint: {slot_time:.6f} секунд")

# Сравнение размеров объектов:
normal_size = sys.getsizeof(NormalPoint(0, 0))
slot_size = sys.getsizeof(SlotPoint(0, 0))

print(f"Размер NormalPoint: {normal_size} байт")
print(f"Размер SlotPoint: {slot_size} байт")

# Попытка добавления новых атрибутов:
try:
    normal_points[0].extra = 100
    print("Успешно добавлен атрибут 'extra' к NormalPoint")
except Exception as e:
    print(f"Ошибка при добавлении атрибута 'extra' к NormalPoint: {e}")

try:
    slot_points[0].extra = 100
except Exception as e:
    print(f"Ошибка при добавлении атрибута 'extra' к SlotPoint: {e}")
#3
class Student:
    """Класс для представления студента с использованием __slots__."""

    __slots__ = ('name', 'age', 'grade')

    def __init__(self, name, age, grade):
        """Инициализация студента с именем, возрастом и оценкой."""
        self.name = name
        self.age = age
        self.grade = grade

def calculate_average_grade(students):
    """Вычисляет среднюю оценку студентов в коллекции."""
    if not students:
        return 0  # Возвращаем 0, если список студентов пуст
    total_grade = sum(student.grade for student in students)
    return total_grade / len(students)

# Создание коллекции студентов:
students = [
    Student("Alice", 20, 90),
    Student("Bob", 22, 75),
    Student("Charlie", 21, 85),
    Student("David", 19, 95)
]

# Вычисление и вывод средней оценки:
average_grade = calculate_average_grade(students)
print(f"Средняя оценка студентов: {average_grade:.2f}")

#4
class Product:
    """Класс для представления товара с использованием __slots__."""

    __slots__ = ('name', 'price', 'quantity')

    def __init__(self, name, price, quantity):
        """Инициализация товара с названием, ценой и количеством."""
        self.name = name
        self.price = price
        self.quantity = quantity

def find_expensive_products(inventory, price_threshold):
    """Возвращает список названий товаров, цена которых превышает заданный порог."""
    expensive_products = [
        name for name, product in inventory.items() if product.price > price_threshold
    ]
    return expensive_products

# Создание словаря товаров:
inventory = {
    "Laptop": Product("Laptop", 1200, 5),
    "Mouse": Product("Mouse", 25, 50),
    "Keyboard": Product("Keyboard", 75, 20),
    "Monitor": Product("Monitor", 300, 10),
    "Headphones": Product("Headphones", 100, 30)
}

# Задание пороговой цены:
price_threshold = 200

# Поиск товаров с ценой выше порога:
expensive_products = find_expensive_products(inventory, price_threshold)

# Вывод результатов:
if expensive_products:
    print("Товары с ценой выше", price_threshold, ":")
    for product_name in expensive_products:
        print("-", product_name)
else:
    print("Нет товаров с ценой выше", price_threshold)
