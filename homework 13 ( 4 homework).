#1
import json

class UserProfile:

    def __init__(self, name, age, interests):
        self.name = name
        self.age = age
        self.interests = interests

    def to_dict(self):
        """Преобразует объект в словарь."""
        return {
            "name": self.name,
            "age": self.age,
            "interests": self.interests
        }

    @classmethod
    def from_dict(cls, data):
        """Создает объект из словаря."""
        try:
            name = data["name"]
            age = data["age"]
            interests = data["interests"]
            return cls(name, age, interests)
        except KeyError as e:
            raise KeyError(f"Отсутствует необходимое поле: {e}")

def save_profile(user, filename="profile.json"):
    try:
        with open(filename, "w") as f:
            json.dump(user.to_dict(), f, indent=4)
        print(f"Профиль сохранен в {filename}")
    except Exception as e:
        print(f"Ошибка при сохранении профиля: {e}")

def load_profile(filename="profile.json"):
    try:
        with open(filename, "r") as f:
            data = json.load(f)
            return UserProfile.from_dict(data)
    except FileNotFoundError:
        print(f"Файл {filename} не найден.")
        return None
    except json.JSONDecodeError:
        print(f"Файл {filename} поврежден или содержит невалидный JSON.")
        return None
    except KeyError as e:
        print(f"Ошибка в структуре данных файла: {e}")
        return None
    except Exception as e:
        print(f"Неизвестная ошибка при загрузке профиля: {e}")
        return None

# Пример использования:
user = UserProfile("Alice", 25, ["Python", "AI"])
save_profile(user, "profile.json")

new_user = load_profile("profile.json")

if new_user:
    print("Профиль загружен:")
    print(f"Имя: {new_user.name}")
    print(f"Возраст: {new_user.age}")
    print(f"Интересы: {new_user.interests}")
#2
import pickle
import os

class Task:

    def __init__(self, name, priority, completed=False):
        self.name = name
        self.priority = priority
        self.completed = completed

    def __str__(self):
        """Строковое представление задачи."""
        status = "[x]" if self.completed else "[ ]"
        return f"{status} (Приоритет: {self.priority}) {self.name}"


def load_tasks(filename="tasks.pickle"):
    try:
        with open(filename, "rb") as f:
            tasks = pickle.load(f)
        print("Задачи загружены из файла.")
        return tasks
    except FileNotFoundError:
        print("Файл задач не найден. Создан новый список.")
        return []
    except EOFError:
        print("Файл задач пуст. Создан новый список.")
        return []
    except Exception as e:
        print(f"Ошибка при загрузке задач: {e}")
        return []


def save_tasks(tasks, filename="tasks.pickle"):
    try:
        with open(filename, "wb") as f:
            pickle.dump(tasks, f)
        print("Задачи сохранены в файл.")
    except Exception as e:
        print(f"Ошибка при сохранении задач: {e}")


def add_task(tasks):
    """Добавляет новую задачу в список."""
    name = input("Введите название задачи: ")
    while True:
        try:
            priority = int(input("Введите приоритет (целое число): "))
            break
        except ValueError:
            print("Некорректный ввод. Приоритет должен быть целым числом.")

    task = Task(name, priority)
    tasks.append(task)
    print("Задача добавлена.")
    return tasks


def remove_task(tasks):
    """Удаляет задачу из списка."""
    if not tasks:
        print("Список задач пуст.")
        return tasks

    print("Список задач:")
    for i, task in enumerate(tasks):
        print(f"{i+1}. {task}")

    while True:
        try:
            index = int(input("Введите номер задачи для удаления: ")) - 1
            if 0 <= index < len(tasks):
                del tasks[index]
                print("Задача удалена.")
                break
            else:
                print("Некорректный номер задачи.")
        except ValueError:
            print("Некорректный ввод. Введите номер задачи.")
    return tasks


def complete_task(tasks):
    """Помечает задачу как выполненную."""
    if not tasks:
        print("Список задач пуст.")
        return tasks

    print("Список задач:")
    for i, task in enumerate(tasks):
        print(f"{i+1}. {task}")

    while True:
        try:
            index = int(input("Введите номер задачи для отметки как выполненной: ")) - 1
            if 0 <= index < len(tasks):
                tasks[index].completed = True
                print("Задача отмечена как выполненная.")
                break
            else:
                print("Некорректный номер задачи.")
        except ValueError:
            print("Некорректный ввод. Введите номер задачи.")
    return tasks


def main():
    """Основная функция программы."""
    filename = "tasks.pickle"
    tasks = load_tasks(filename)

    while True:
        print("\nВыберите действие:")
        print("1. Добавить задачу")
        print("2. Удалить задачу")
        print("3. Отметить задачу как выполненную")
        print("4. Показать список задач")
        print("5. Сохранить и выйти")

        choice = input("Введите номер действия: ")

        if choice == "1":
            tasks = add_task(tasks)
        elif choice == "2":
            tasks = remove_task(tasks)
        elif choice == "3":
            tasks = complete_task(tasks)
        elif choice == "4":
            if not tasks:
                print("Список задач пуст.")
            else:
                print("Список задач:")
                for task in tasks:
                    print(task)
        elif choice == "5":
            save_tasks(tasks, filename)
            break
        else:
            print("Некорректный выбор. Попробуйте снова.")


if __name__ == "__main__":
    main()

#3
import json
import re

def load_users(filename="users.json"):
    """
    Загружает пользователей из JSON-файла, выполняет валидацию и подсчет.

    Args:
        filename (str, optional): Имя JSON-файла.  Defaults to "users.json".

    Returns:
        tuple: Кортеж, содержащий:
            - list: Список валидных пользователей.
            - int: Количество загруженных пользователей.
            - int: Количество пропущенных пользователей.
    """

    valid_users = []
    loaded_count = 0
    skipped_count = 0

    try:
        with open(filename, 'r') as f:
            users_data = json.load(f)

        if not isinstance(users_data, list):
            print(f"Error: File '{filename}' does not contain a list of users.")
            return [], 0, 0

        for user in users_data:
            loaded_count += 1
            if validate_user(user):
                valid_users.append(user)
            else:
                skipped_count += 1

    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return [], 0, 0
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from file '{filename}'.  Check for syntax errors.")
        return [], 0, 0
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return [], 0, 0

    return valid_users, len(valid_users), skipped_count


def validate_user(user):
    """
    Проверяет структуру и типы данных пользователя.

    Args:
        user (dict): Словарь, представляющий пользователя.

    Returns:
        bool: True, если пользователь валиден, False в противном случае.
    """
    if not isinstance(user, dict):
        print("Error: User is not a dictionary.")
        return False

    if not isinstance(user.get("id"), int):
        print(f"Error: User ID must be an integer. User: {user}")
        return False

    if not isinstance(user.get("name"), str):
        print(f"Error: User Name must be a string. User: {user}")
        return False

    email = user.get("email")
    if not isinstance(email, str) or "@" not in email:
        print(f"Error: Invalid or missing email. User: {user}")
        return False

    # More robust email validation (optional)
    # if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
    #     print(f"Error: Invalid email format. User: {user}")
    #     return False

    return True


# Пример использования:
if __name__ == "__main__":
    # Create a sample users.json file (for testing)
    sample_users = [
        {"id": 1, "name": "Tom", "email": "tom@example.com"},
        {"id": 2, "name": "Alice", "email": "alice@example.net"},
        {"id": 3, "name": 123, "email": "bob@example.org"},  # Invalid name (should be a string)
        {"id": "4", "name": "Charlie", "email": "charlieexample.com"},  # Invalid ID (should be an integer) and Email
        {"name": "David", "email": "david@example.com"},  # Missing ID
        {"id": 5, "name": "Eve", "email": "eve@example.com"},
        {"id": 6, "name": "Frank", "email": 123}, # Invalid Email
        {"id": 7, "name": "Grace", "email": "grace@example.com"}
    ]

    with open("users.json", "w") as f:
        json.dump(sample_users, f, indent=4)


    valid_users, loaded_count, skipped_count = load_users("users.json")

    print(f"Loaded users: {loaded_count}")
    print(f"Skipped users: {skipped_count}")
    print(f"Valid users:\n{json.dumps(valid_users, indent=4)}") # Display valid users (optional)

  #4
  import datetime
import pickle
import os

class Note:
    """
    Класс, представляющий заметку.
    """

    def __init__(self, title, text):
        """

        Args:
            title (str): Заголовок заметки.
            text (str): Текст заметки.
        """
        self.title = title
        self.text = text
        self.creation_date = datetime.datetime.now()

    def __str__(self):
        """
        Возвращает строковое представление заметки.
        """
        return f"Title: {self.title}\nDate: {self.creation_date.strftime('%Y-%m-%d %H:%M:%S')}\nText: {self.text}\n"


class NoteManager:
    def __init__(self, filename="notes.pkl"):
        """

        Args:
            filename (str, optional): Имя файла для сериализации. Defaults to "notes.pkl".
        """
        self.filename = filename
        self.notes = self.load_notes()

    def add_note(self, title, text):
        """
        Добавляет новую заметку.

        Args:
            title (str): Заголовок заметки.
            text (str): Текст заметки.
        """
        note = Note(title, text)
        self.notes.append(note)
        self.save_notes()
        print(f"Note '{title}' added successfully.")

    def delete_note(self, title):
        """

        Args:
            title (str): Заголовок заметки для удаления.
        """
        initial_length = len(self.notes)
        self.notes = [note for note in self.notes if note.title != title]
        if len(self.notes) < initial_length:
            self.save_notes()
            print(f"Note '{title}' deleted successfully.")
        else:
            print(f"Note '{title}' not found.")

    def show_all_notes(self):
        """
        Отображает все заметки с датами создания.
        """
        if not self.notes:
            print("No notes found.")
        else:
            for note in self.notes:
                print(note)

    def load_notes(self):
        try:
            with open(self.filename, 'rb') as f:
                return pickle.load(f)
        except FileNotFoundError:
            print(f"File '{self.filename}' not found. Starting with an empty notebook.")
            return []
        except Exception as e:
            print(f"An error occurred while loading notes: {e}.  Starting with an empty notebook.")
            return []

    def save_notes(self):
        try:
            with open(self.filename, 'wb') as f:
                pickle.dump(self.notes, f)
        except Exception as e:
            print(f"An error occurred while saving notes: {e}")

# Пример использования:
if __name__ == "__main__":
    note_manager = NoteManager()

    # Добавляем несколько заметок
    note_manager.add_note("Shopping List", "Milk, eggs, bread, cheese")
    note_manager.add_note("Meeting Notes", "Discuss project progress, assign tasks")
    note_manager.add_note("Ideas", "Write a short story, learn a new language")

    # Отображаем все заметки
    print("\n--- All Notes ---")
    note_manager.show_all_notes()

    # Удаляем заметку
    note_manager.delete_note("Shopping List")

    # Отображаем заметки после удаления
    print("\n--- Notes After Deletion ---")
    note_manager.show_all_notes()

    # Проверяем, что заметки сохраняются и загружаются правильно
    print("\n--- Reloading Notes ---")
    new_note_manager = NoteManager()
    new_note_manager.show_all_notes()
