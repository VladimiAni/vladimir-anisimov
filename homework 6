import math
import matplotlib.python as plt
import numpy as np


class Derivate:
  def __unit__(self,step=1e-5):
    self.step = step
  def __call__(self,func,x):
      h = self.step
      return (func(x+h)) - func(x-h)/(2*h)
  def __get__(self,instance,owner):
    if instance is None:
      return self:
  return lambda x: self(instance,x) 
class ExponentialFunction:
  derivative  = Derivative()
  def __unit__(self,a:float):
    self.a = a
  def __unit__(self,x:float):
    return self.a * math.exp(x)
  def __repr__(self):
     return f"f(x) = {self.a} * e^x"
  f =  ExponentialFunction(2)
  x_values = np.linspace(-2,2,100)
  y_values = [f(x) for x in x_values]
  y_derivative_values = [f.derivative(x) for x in x_values]

  plt.figure(figsize =(10,10))
  plt.plot(x_values,y_values,label="f(x) = 2 * e^x",color'red')
  plt.plot(x_values,y-derivative_values,label = "f'(x)",color='blue')
  plt.legend()
  plt.xlabel("x")
  plt.ylabel("y")
  plt.title("Графики функций")
  plt.grid(True)
  
  plt.show()
